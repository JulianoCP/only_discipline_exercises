#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <error.h>
#include <fcntl.h>
#include <errno.h>
#include <stdio.h>

struct sockaddr_in serv; 
int fd_socket, fd_fifo; 
int conn;
int pipe_1[2];
int pipe_2[2];
char message[100] = ""; 
int flag = 1;

int main(){
	serv.sin_family = AF_INET;
	serv.sin_port = htons(8096); 
	serv.sin_addr.s_addr = INADDR_ANY;
	
	fd_socket = socket(AF_INET, SOCK_STREAM, 0);
	bind(fd_socket, (struct sockaddr *)&serv, sizeof(serv)); 
	listen(fd_socket,2);

    pipe(pipe_1);
    pipe(pipe_2);

	while((conn = accept(fd_socket, (struct sockaddr *)NULL, NULL))) {

        int flag_fork = -1;
        flag_fork = flag;
        if(flag){flag = 0;}

		int pid = fork();
		if(pid == 0){
           
            char cmd[3];
			while (recv(conn, message, 100, 0) > 0) {
                memset(cmd, '\0', sizeof(cmd));
                strncpy(cmd, message, 3);
            
                printf("\n> %s\n", cmd);
                
                if(flag_fork){
                    //Fork 1
                    printf("\n---Fork 1");
                    char cmd_tmp[3];

                    /* Le pipe do Fork 1 */
                    close(pipe_1[1]);
                    while(1){
                           if(read(pipe_1[0], cmd_tmp, sizeof(cmd_tmp))){
                                    printf("\nFORK 2 Enviou coisa!\n");
                                    break;
                           }
                    }
            
                    fflush(stdout);
                    /*Escreve no pipe Fork 2*/
                    /*
                    close(pipe_2[0]);
		            write(pipe_2[1], cmd, sizeof(cmd));
                    wait(NULL);
                   printf("\n Fork2 >> %s", cmd_tmp);
                    */
                }else{
                    //Fork 2
                    char cmd_tmp[3];

                    /* Le pipe do fork 2 */
                    //close(pipe_2[1]);
                    //read(pipe_2[0], cmd_tmp, sizeof(cmd_tmp));
                    //close(pipe_2[0]);

                    /*Escreve no pipe Fork 1*/
                    close(pipe_1[0]);
		            write(pipe_1[1], cmd, sizeof(cmd));
                    wait(NULL);


                    //printf("\n << Fork1 >> %s", cmd_tmp);
                    printf("\n---Fork 2"); 
                    fflush(stdout);
                }
                //1- passar cmd para o pipe correto
                //2-ler pipe 
                //3 - passo pipe lido via socket 

				memset(cmd, '\0', sizeof (cmd));
				memset(message, '\0', sizeof (message));
                fflush(stdout);
			}

		}
	}
}
